import { AxiosInstance } from "axios";
import { decode } from "jsonwebtoken";
import { getCommonMoneyHubFormParams } from "./request-form-params";

export async function authCodeWrapper(
  moneyHubAxios: AxiosInstance,
  authCode: string
): Promise<string> {
  try {
    const body = await getCommonMoneyHubFormParams({
      grant_type: "authorization_code",
      code: authCode,
      redirect_uri: "https://www.example.com/callback", // Ensure this matches the redirect URI used before
    });

    const response = await moneyHubAxios.post("/oidc/token", body, {
      headers: { "Content-Type": "application/x-www-form-urlencoded" },
    });

    const { id_token } = response.data;

    if (!id_token) {
      throw new Error("ID Token is missing in the response.");
    }

    const decoded = decode(id_token, { json: true });
    const sub = decoded?.sub;

    if (!sub) {
      throw new Error("Unable to extract 'sub' from ID Token.");
    }

    return sub;
  } catch (error) {
    console.error("Error during Auth Code Exchange:", error.message);
    throw new Error(`Failed to exchange authorization code: ${error.message}`);
  }
}


------

import { AxiosInstance } from "axios";
import { SECRETS } from "../config/secrets";
import { getCommonMoneyHubFormParams } from "../helpers/moneyhub/request-form-params";
import { decode } from "jsonwebtoken";

export function authCodeExchangeWrapper(
  moneyHubAxios: AxiosInstance,
  authCode: string
): Promise<string> {
  return getCommonMoneyHubFormParams({
    grant_type: "authorization_code",
    code: authCode,
    redirect_uri: SECRETS.redirect_uri,
    client_id: SECRETS.moneyHub.client_id,
  })
    .then((body) =>
      moneyHubAxios.post("/oidc/token", body, {
        headers: { "Content-Type": "application/x-www-form-urlencoded" },
      })
    )
    .then((response) => {
      const idToken = response.data?.id_token;

      if (!idToken) {
        throw new Error("ID Token is missing in the response.");
      }

      const payload = JSON.parse(Buffer.from(idToken.split(".")[1], "base64").toString("utf8"));
      const sub = payload.sub;

      if (!sub) {
        throw new Error("Unable to extract 'sub' from ID Token.");
      }

      return sub;
    })
    .catch((error) => {
      const status = error.response?.status;
      const message = error.response?.data?.message || error.message;

      if (status === 400) {
        throw new Error(`Invalid Request: ${message}`);
      } else if (status === 401) {
        throw new Error(`Unauthorized: ${message}`);
      } else if (status === 500) {
        throw new Error(`Server Error: ${message}`);
      }

      throw new Error(`Failed to exchange authorization code: ${message}`);
    });
}